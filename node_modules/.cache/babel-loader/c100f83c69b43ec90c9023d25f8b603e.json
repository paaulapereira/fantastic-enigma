{"ast":null,"code":"var _jsxFileName = \"/Users/pereirapaula/Desktop/curso react/music-player/src/components/Player.js\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = ({\n  audioRef,\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setSongInfo,\n  songInfo,\n  songs,\n  setCurrentSong\n}) => {\n  //events\n  const playSongHandler = () => {\n    //si esta sonando y hacen click al boton, se hace pause, sino se toca la cancion\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying); //cambia el valor al opuesto de lo que estaba\n    }\n  };\n\n  const getTime = time => {\n    return (//conseguimos los minutos y los segundos despues\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) //slice es una funcion que formata bien el numero\n\n    );\n  };\n\n  const dragHandler = e => {\n    //la e es de eventos\n    //cambia el audio para donde se fue arrastrado el evento (del range)\n    audioRef.current.currentTime = e.target.value; //cambia el state para que se actualice con la informacion anterior y cambie el current time al valor donde fue arrastradi\n\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    }); //los tres puntos es para mantener la informacion que tenia\n  };\n\n  const skipTrackHandler = direction => {\n    //si los ids son iguales significa que estamos en ese id, y se coge el index de esa canción\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (direction === \"skip-forward\") {\n      //cambia a la cancion siguiente, y cuando se terminan las cacnciones en el array se vuelve a la 0 por el % que es el resto\n      setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    }\n\n    if (direction === \"skip-back\") {\n      if ((currentIndex - 1) % songs.length === -1) {\n        setCurrentSong(songs[songs.length - 1]);\n      }\n\n      setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 64,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        min: 0,\n        max: songInfo.duration || 0,\n        value: songInfo.currentTime,\n        onChange: dragHandler,\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 65,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 72,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 63,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft,\n        onClick: () => skipTrackHandler(\"skip-back\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 75,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"2x\",\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler(\"skip-forward\"),\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 74,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 62,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Player;\nexport default Player; //OBSERVACIONES DEL RETURN\n//onClick={()=>skipTrackHandler(back)} cuando una funcion tiene un parametro, se inicializa sola, pero si la pones como ejecucion de una funcion flacha se espera hasta que se haga click de verdad\n//el input range es un input controlado porque esta vinculado a un state\n//el icono de pause y play se cambia de acuerdo con el state de isPlaying (con una condicional ternaria)\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/pereirapaula/Desktop/curso react/music-player/src/components/Player.js"],"names":["React","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","audioRef","currentSong","isPlaying","setIsPlaying","setSongInfo","songInfo","songs","setCurrentSong","playSongHandler","current","pause","play","getTime","time","Math","floor","slice","dragHandler","e","currentTime","target","value","skipTrackHandler","direction","currentIndex","findIndex","song","id","length","duration"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({\n  audioRef,\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setSongInfo,\n  songInfo,\n  songs,\n  setCurrentSong,\n}) => {\n  //events\n  const playSongHandler = () => {\n    //si esta sonando y hacen click al boton, se hace pause, sino se toca la cancion\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying); //cambia el valor al opuesto de lo que estaba\n    }\n  };\n\n  const getTime = (time) => {\n    return (\n      //conseguimos los minutos y los segundos despues\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) //slice es una funcion que formata bien el numero\n    );\n  };\n\n  const dragHandler = (e) => {\n    //la e es de eventos\n    //cambia el audio para donde se fue arrastrado el evento (del range)\n    audioRef.current.currentTime = e.target.value;\n    //cambia el state para que se actualice con la informacion anterior y cambie el current time al valor donde fue arrastradi\n    setSongInfo({ ...songInfo, currentTime: e.target.value }); //los tres puntos es para mantener la informacion que tenia\n  };\n  const skipTrackHandler = (direction) => {\n    //si los ids son iguales significa que estamos en ese id, y se coge el index de esa canción\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    if (direction === \"skip-forward\") {\n      //cambia a la cancion siguiente, y cuando se terminan las cacnciones en el array se vuelve a la 0 por el % que es el resto\n      setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    }\n    if (direction === \"skip-back\") {\n      if ((currentIndex - 1) % songs.length === -1) {\n        setCurrentSong(songs[songs.length - 1]);\n      }\n      setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n    }\n  };\n\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <input\n          min={0}\n          max={songInfo.duration || 0}\n          value={songInfo.currentTime}\n          onChange={dragHandler}\n          type=\"range\"\n        />\n        <p>{getTime(songInfo.duration)}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          className=\"skip-back\"\n          size=\"2x\"\n          icon={faAngleLeft}\n          onClick={() => skipTrackHandler(\"skip-back\")}\n        />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          onClick={() => skipTrackHandler(\"skip-forward\")}\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n//OBSERVACIONES DEL RETURN\n\n//onClick={()=>skipTrackHandler(back)} cuando una funcion tiene un parametro, se inicializa sola, pero si la pones como ejecucion de una funcion flacha se espera hasta que se haga click de verdad\n\n//el input range es un input controlado porque esta vinculado a un state\n//el icono de pause y play se cambia de acuerdo con el state de isPlaying (con una condicional ternaria)\n"]},"metadata":{},"sourceType":"module"}