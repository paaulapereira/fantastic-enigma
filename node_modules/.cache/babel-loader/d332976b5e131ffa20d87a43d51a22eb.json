{"ast":null,"code":"var _jsxFileName = \"/Users/pereirapaula/Desktop/curso react/music-player/src/App.js\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useRef } from \"react\"; //importar componentes\n\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\"; //importar estilos\n\nimport \"./styles/app.scss\"; //importar musicas\n\nimport data from \"./songsList\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nfunction App() {\n  _s();\n\n  //state\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false); //referencias\n\n  const audioRef = useRef(null); //audio de la cancion\n  //funciones\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration; //calcular porcentaje de la cancion\n\n    const roundedCurrent = Math.round(current); //funcion para quitar los decimales\n\n    console.log(roundedCurrent);\n    const roundedDuration = Math.round(duration);\n    console.log(roundedDuration);\n    const animation = Math.round(roundedCurrent / roundedDuration);\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation\n    });\n  }; //otra manera de hacer esa funcion\n  // const timeUpdateHandler = ({ target : {currentTime, duration} }) => {\n  //   setSongInfo({ ...songInfo, currentTime, duration });\n  // };\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: [/*#__PURE__*/_jsxDEV(Nav, {\n      libraryStatus: libraryStatus,\n      setLibraryStatus: setLibraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Song, {\n      currentSong: currentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Player, {\n      audioRef: audioRef,\n      isPlaying: isPlaying,\n      setIsPlaying: setIsPlaying,\n      currentSong: currentSong,\n      setSongInfo: setSongInfo,\n      songInfo: songInfo,\n      songs: songs,\n      setSongs: setSongs,\n      setCurrentSong: setCurrentSong\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Library, {\n      songs: songs,\n      setCurrentSong: setCurrentSong,\n      audioRef: audioRef,\n      isPlaying: isPlaying,\n      setSongs: setSongs,\n      libraryStatus: libraryStatus\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 62,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler //cuando se carga la informacion del audio ya empieza\n      ,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 48,\n    columnNumber: 5\n  }, this);\n}\n\n_s(App, \"bGS8FoxhWUwDzibAGMIs6/YpRqQ=\");\n\n_c = App;\nexport default App;\n\nvar _c;\n\n$RefreshReg$(_c, \"App\");","map":{"version":3,"sources":["/Users/pereirapaula/Desktop/curso react/music-player/src/App.js"],"names":["React","useState","useRef","Player","Song","Library","Nav","data","App","songs","setSongs","currentSong","setCurrentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","animationPercentage","libraryStatus","setLibraryStatus","audioRef","timeUpdateHandler","e","current","target","roundedCurrent","Math","round","console","log","roundedDuration","animation","audio"],"mappings":"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","sourcesContent":["import React, { useState, useRef } from \"react\";\n//importar componentes\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\n//importar estilos\nimport \"./styles/app.scss\";\n//importar musicas\nimport data from \"./songsList\";\n\nfunction App() {\n  //state\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  //referencias\n  const audioRef = useRef(null); //audio de la cancion\n  //funciones\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    //calcular porcentaje de la cancion\n    const roundedCurrent = Math.round(current); //funcion para quitar los decimales\n    console.log(roundedCurrent);\n    const roundedDuration = Math.round(duration);\n    console.log(roundedDuration);\n    const animation = Math.round(roundedCurrent / roundedDuration);\n\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation,\n    });\n  };\n  //otra manera de hacer esa funcion\n  // const timeUpdateHandler = ({ target : {currentTime, duration} }) => {\n  //   setSongInfo({ ...songInfo, currentTime, duration });\n  // };\n  return (\n    <div className=\"App\">\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} />\n      <Player\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n        setSongInfo={setSongInfo}\n        songInfo={songInfo}\n        songs={songs}\n        setSongs={setSongs}\n        setCurrentSong={setCurrentSong}\n      />\n      <Library\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setSongs={setSongs}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onTimeUpdate={timeUpdateHandler}\n        //cuando se carga la informacion del audio ya empieza\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n"]},"metadata":{},"sourceType":"module"}