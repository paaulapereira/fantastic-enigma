{"ast":null,"code":"var _jsxFileName = \"/Users/pereirapaula/Desktop/curso react/music-player/src/components/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = ({\n  currentSong,\n  isPlaying,\n  setIsPlaying\n}) => {\n  _s();\n\n  //state\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0\n  }); //events\n\n  const playSongHandler = () => {\n    //si esta sonando y hacen click al boton, se hace pause, sino se toca la cancion\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying); //cambia el valor al opuesto de lo que estaba\n    }\n  };\n\n  const timeUpdateHandler = e => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo,\n      currentTime: current,\n      duration\n    });\n  }; //otra manera de hacer esa funcion\n  // const timeUpdateHandler = ({ target : {currentTime, duration} }) => {\n  //   setSongInfo({ ...songInfo, currentTime, duration });\n  // };\n\n\n  const getTime = time => {\n    return (//conseguimos los minutos y los segundos despues\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) //slice es una funcion que formata bien el numero\n\n    );\n  }; //la e es de eventos\n\n\n  const dragHandler = e => {\n    //cambia el audio para donde se fue arrastrado el evento (del range)\n    audioRef.current.currentTime = e.target.value; //cambia el state para que se actualice con la informacion anterior y cambie el current time al valor donde fue arrastradi\n\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    }); //los tres puntos es para mantener la informacion que tenia\n  }; //el input range es un input controlado porque esta vinculado a un state\n  //el icono se cambia de acuerdo con el state de isPlaying (con una condicional ternaria)\n\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 55,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        min: 0,\n        max: songInfo.duration,\n        value: songInfo.currentTime,\n        onChange: dragHandler,\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 54,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 66,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"2x\",\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 67,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 73,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"audio\", {\n      onTimeUpdate: timeUpdateHandler //cuando se carga la informacion del audio ya empieza\n      ,\n      onLoadedMetadata: timeUpdateHandler,\n      ref: audioRef,\n      src: currentSong.audio\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 53,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Player, \"WKDVijOVAYAxBomD/QxdNzU11mM=\");\n\n_c = Player;\nexport default Player;\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/pereirapaula/Desktop/curso react/music-player/src/components/Player.js"],"names":["React","useRef","useState","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","currentSong","isPlaying","setIsPlaying","songInfo","setSongInfo","currentTime","duration","playSongHandler","audioRef","current","pause","play","timeUpdateHandler","e","target","getTime","time","Math","floor","slice","dragHandler","value","audio"],"mappings":"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","sourcesContent":["import React, { useRef, useState } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({ currentSong, isPlaying, setIsPlaying }) => {\n  //state\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n  });\n  //events\n  const playSongHandler = () => {\n    //si esta sonando y hacen click al boton, se hace pause, sino se toca la cancion\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying); //cambia el valor al opuesto de lo que estaba\n    }\n  };\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    setSongInfo({ ...songInfo, currentTime: current, duration });\n  };\n\n  //otra manera de hacer esa funcion\n  // const timeUpdateHandler = ({ target : {currentTime, duration} }) => {\n  //   setSongInfo({ ...songInfo, currentTime, duration });\n  // };\n  const getTime = (time) => {\n    return (\n      //conseguimos los minutos y los segundos despues\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) //slice es una funcion que formata bien el numero\n    );\n  };\n  //la e es de eventos\n  const dragHandler = (e) => {\n    //cambia el audio para donde se fue arrastrado el evento (del range)\n    audioRef.current.currentTime = e.target.value;\n    //cambia el state para que se actualice con la informacion anterior y cambie el current time al valor donde fue arrastradi\n    setSongInfo({ ...songInfo, currentTime: e.target.value }); //los tres puntos es para mantener la informacion que tenia\n  };\n  //el input range es un input controlado porque esta vinculado a un state\n  //el icono se cambia de acuerdo con el state de isPlaying (con una condicional ternaria)\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <input\n          min={0}\n          max={songInfo.duration}\n          value={songInfo.currentTime}\n          onChange={dragHandler}\n          type=\"range\"\n        />\n        <p>{getTime(songInfo.duration)}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon className=\"skip-back\" size=\"2x\" icon={faAngleLeft} />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n        />\n      </div>\n      <audio\n        onTimeUpdate={timeUpdateHandler}\n        //cuando se carga la informacion del audio ya empieza\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n      ></audio>\n    </div>\n  );\n};\n\nexport default Player;\n"]},"metadata":{},"sourceType":"module"}