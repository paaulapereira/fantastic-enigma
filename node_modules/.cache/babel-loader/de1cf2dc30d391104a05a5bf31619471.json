{"ast":null,"code":"var _jsxFileName = \"/Users/pereirapaula/Desktop/curso react/music-player/src/components/Player.js\",\n    _s = $RefreshSig$();\n\nimport React, { useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { playAudio } from \"../util\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = ({\n  audioRef,\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setSongInfo,\n  songInfo,\n  songs,\n  setCurrentSong,\n  setSongs\n}) => {\n  _s();\n\n  //use effect\n  useEffect(() => {\n    //add active state\n    const newSongs = songs.map(song => {\n      if (song.id === currentSong.id) {\n        return { //devuelve la cancion entera pero cambia el active a true\n          ...song,\n          active: true\n        };\n      }\n\n      return { //devuelve la cancion entera pero cambia el active a false\n        ...song,\n        active: false\n      };\n    }); //definimos el state para el array que hemos creado con el map\n\n    setSongs(newSongs);\n  }, [currentSong]); //ese efecto va a ser ejecutado a cada vez que se actualice el currentSong\n  //events\n\n  const playSongHandler = () => {\n    //si esta sonando y hacen click al boton, se hace pause, sino se toca la cancion\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying); //cambia el valor al opuesto de lo que estaba\n    }\n  };\n\n  const getTime = time => {\n    return (//conseguimos los minutos y los segundos despues\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) //slice es una funcion que formata bien el numero\n\n    );\n  };\n\n  const dragHandler = e => {\n    //la e es de eventos\n    //cambia el audio para donde se fue arrastrado el evento (del range)\n    audioRef.current.currentTime = e.target.value; //cambia el state para que se actualice con la informacion anterior y cambie el current time al valor donde fue arrastradi\n\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    }); //los tres puntos es para mantener la informacion que tenia\n  };\n\n  const skipTrackHandler = direction => {\n    //si los ids son iguales significa que estamos en ese id, y se coge el index de esa canciÃ³n\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (direction === \"skip-forward\") {\n      //cambia a la cancion siguiente, y cuando llegan al mismo numero se vuelve al 0\n      setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    }\n\n    if (direction === \"skip-back\") {\n      //si el index actual es -1 (que estamos volviendo de la primera a la ultima cancion), se cambia automaticamente a la ultima cancion\n      if ((currentIndex - 1) % songs.length === -1) {\n        setCurrentSong(songs[songs.length - 1]); //songs.lenght son 8 pero los arrays empiezan en 7 y la ultima cancion es la 7\n\n        return;\n      } //esa linea es solo si estamos en el medio de las canciones\n\n\n      setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n    }\n  };\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"input\", {\n        min: 0,\n        max: songInfo.duration || 0,\n        value: songInfo.currentTime,\n        onChange: dragHandler,\n        type: \"range\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.duration)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 96,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 87,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft,\n        onClick: () => skipTrackHandler(\"skip-back\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"2x\",\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 105,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler(\"skip-forward\"),\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 86,\n    columnNumber: 5\n  }, this);\n};\n\n_s(Player, \"OD7bBpZva5O2jO+Puf00hKivP7c=\");\n\n_c = Player;\nexport default Player; //OBSERVACIONES DEL RETURN\n//onClick={()=>skipTrackHandler(back)} cuando una funcion tiene un parametro, se inicializa sola, pero si la pones como ejecucion de una funcion flacha se espera hasta que se haga click de verdad\n//el input range es un input controlado porque esta vinculado a un state\n//el icono de pause y play se cambia de acuerdo con el state de isPlaying (con una condicional ternaria)\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/pereirapaula/Desktop/curso react/music-player/src/components/Player.js"],"names":["React","useEffect","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","playAudio","Player","audioRef","currentSong","isPlaying","setIsPlaying","setSongInfo","songInfo","songs","setCurrentSong","setSongs","newSongs","map","song","id","active","playSongHandler","current","pause","play","getTime","time","Math","floor","slice","dragHandler","e","currentTime","target","value","skipTrackHandler","direction","currentIndex","findIndex","length","duration"],"mappings":"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","sourcesContent":["import React, { useEffect } from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from \"@fortawesome/free-solid-svg-icons\";\nimport { playAudio } from \"../util\";\n\nconst Player = ({\n  audioRef,\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setSongInfo,\n  songInfo,\n  songs,\n  setCurrentSong,\n  setSongs,\n}) => {\n  //use effect\n  useEffect(() => {\n    //add active state\n    const newSongs = songs.map((song) => {\n      if (song.id === currentSong.id) {\n        return {\n          //devuelve la cancion entera pero cambia el active a true\n          ...song,\n          active: true,\n        };\n      }\n      return {\n        //devuelve la cancion entera pero cambia el active a false\n        ...song,\n        active: false,\n      };\n    });\n    //definimos el state para el array que hemos creado con el map\n    setSongs(newSongs);\n  }, [currentSong]); //ese efecto va a ser ejecutado a cada vez que se actualice el currentSong\n  //events\n  const playSongHandler = () => {\n    //si esta sonando y hacen click al boton, se hace pause, sino se toca la cancion\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying); //cambia el valor al opuesto de lo que estaba\n    }\n  };\n\n  const getTime = (time) => {\n    return (\n      //conseguimos los minutos y los segundos despues\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) //slice es una funcion que formata bien el numero\n    );\n  };\n\n  const dragHandler = (e) => {\n    //la e es de eventos\n    //cambia el audio para donde se fue arrastrado el evento (del range)\n    audioRef.current.currentTime = e.target.value;\n    //cambia el state para que se actualice con la informacion anterior y cambie el current time al valor donde fue arrastradi\n    setSongInfo({ ...songInfo, currentTime: e.target.value }); //los tres puntos es para mantener la informacion que tenia\n  };\n  const skipTrackHandler = (direction) => {\n    //si los ids son iguales significa que estamos en ese id, y se coge el index de esa canciÃ³n\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    if (direction === \"skip-forward\") {\n      //cambia a la cancion siguiente, y cuando llegan al mismo numero se vuelve al 0\n      setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    }\n    if (direction === \"skip-back\") {\n      //si el index actual es -1 (que estamos volviendo de la primera a la ultima cancion), se cambia automaticamente a la ultima cancion\n      if ((currentIndex - 1) % songs.length === -1) {\n        setCurrentSong(songs[songs.length - 1]); //songs.lenght son 8 pero los arrays empiezan en 7 y la ultima cancion es la 7\n        return;\n      } //esa linea es solo si estamos en el medio de las canciones\n      setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n    }\n  };\n\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <input\n          min={0}\n          max={songInfo.duration || 0}\n          value={songInfo.currentTime}\n          onChange={dragHandler}\n          type=\"range\"\n        />\n        <p>{getTime(songInfo.duration)}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          className=\"skip-back\"\n          size=\"2x\"\n          icon={faAngleLeft}\n          onClick={() => skipTrackHandler(\"skip-back\")}\n        />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          onClick={() => skipTrackHandler(\"skip-forward\")}\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n//OBSERVACIONES DEL RETURN\n\n//onClick={()=>skipTrackHandler(back)} cuando una funcion tiene un parametro, se inicializa sola, pero si la pones como ejecucion de una funcion flacha se espera hasta que se haga click de verdad\n\n//el input range es un input controlado porque esta vinculado a un state\n//el icono de pause y play se cambia de acuerdo con el state de isPlaying (con una condicional ternaria)\n"]},"metadata":{},"sourceType":"module"}