{"ast":null,"code":"var _jsxFileName = \"/Users/pereirapaula/Desktop/curso react/react-music-library/src/components/Player.js\";\nimport React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faPlay, faAngleLeft, faAngleRight, faPause } from \"@fortawesome/free-solid-svg-icons\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst Player = ({\n  audioRef,\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setSongInfo,\n  songInfo,\n  songs,\n  setCurrentSong,\n  setSongs\n}) => {\n  const activeLibraryHandler = nextPrev => {\n    //add active state\n    const newSongs = songs.map(song => {\n      if (song.id === nextPrev.id) {\n        return { //devuelve la cancion entera pero cambia el active a true\n          ...song,\n          active: true\n        };\n      }\n\n      return { //devuelve la cancion entera pero cambia el active a false\n        ...song,\n        active: false\n      };\n    }); //definimos el state para el array que hemos creado con el map\n\n    setSongs(newSongs);\n  }; //events\n\n\n  const playSongHandler = () => {\n    //si esta sonando y hacen click al boton, se hace pause, sino se toca la cancion\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying); //cambia el valor al opuesto de lo que estaba\n    }\n  };\n\n  const getTime = time => {\n    return (//conseguimos los minutos y los segundos despues\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) //slice es una funcion que formata bien el numero\n\n    );\n  };\n\n  const dragHandler = e => {\n    //la e es de eventos\n    //cambia el audio para donde se fue arrastrado el evento (del range)\n    audioRef.current.currentTime = e.target.value; //cambia el state para que se actualice con la informacion anterior y cambie el current time al valor donde fue arrastradi\n\n    setSongInfo({ ...songInfo,\n      currentTime: e.target.value\n    }); //los tres puntos es para mantener la informacion que tenia\n  }; //el async significa que la funcion es asincrona\n  //esperamos que se cambien los estados siempre antes de seguir con el await\n  //await the setStates\n\n\n  const skipTrackHandler = async direction => {\n    //si los ids son iguales significa que estamos en ese id, y se coge el index de esa canción\n    let currentIndex = songs.findIndex(song => song.id === currentSong.id);\n\n    if (direction === \"skip-forward\") {\n      //cambia a la cancion siguiente, y cuando llegan al mismo numero se vuelve al 0\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]); //el await es para que espere que se defina la cancion\n\n      activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\n    }\n\n    if (direction === \"skip-back\") {\n      //si el index actual es -1 (que estamos volviendo de la primera a la ultima cancion), se cambia automaticamente a la ultima cancion\n      if ((currentIndex - 1) % songs.length === -1) {\n        await setCurrentSong(songs[songs.length - 1]); //songs.lenght son 8 pero los arrays empiezan en 7 y la ultima cancion es la 7\n\n        activeLibraryHandler(songs[songs.length - 1]);\n        if (isPlaying) audioRef.current.play();\n        return;\n      } //esa linea es solo si estamos en el medio de las canciones\n\n\n      await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex - 1) % songs.length]);\n    }\n\n    if (isPlaying) audioRef.current.play();\n  }; //añadir los estilos\n\n\n  const trackAnim = {\n    transform: `translateX(${songInfo.animationPercentage}%)`\n  };\n  const linearGrad = {\n    background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"player\",\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"time-control\",\n      children: [/*#__PURE__*/_jsxDEV(\"p\", {\n        children: getTime(songInfo.currentTime)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 99,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        style: linearGrad,\n        className: \"track\",\n        children: [/*#__PURE__*/_jsxDEV(\"input\", {\n          min: 0,\n          max: songInfo.duration || 0,\n          value: songInfo.currentTime,\n          onChange: dragHandler,\n          type: \"range\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 11\n        }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n          style: trackAnim,\n          className: \"animate-track\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 108,\n          columnNumber: 11\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 100,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: songInfo.duration ? getTime(songInfo.duration) : \"0:00\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 98,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"play-control\",\n      children: [/*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        className: \"skip-back\",\n        size: \"2x\",\n        icon: faAngleLeft,\n        onClick: () => skipTrackHandler(\"skip-back\")\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 113,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: playSongHandler,\n        className: \"play\",\n        size: \"2x\",\n        icon: isPlaying ? faPause : faPlay\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 119,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(FontAwesomeIcon, {\n        onClick: () => skipTrackHandler(\"skip-forward\"),\n        className: \"skip-forward\",\n        size: \"2x\",\n        icon: faAngleRight\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 125,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 112,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 97,\n    columnNumber: 5\n  }, this);\n};\n\n_c = Player;\nexport default Player; //OBSERVACIONES DEL RETURN\n//onClick={()=>skipTrackHandler(back)} cuando una funcion tiene un parametro, se inicializa sola, pero si la pones como ejecucion de una funcion flacha se espera hasta que se haga click de verdad\n//el input range es un input controlado porque esta vinculado a un state\n//el icono de pause y play se cambia de acuerdo con el state de isPlaying (con una condicional ternaria)\n\nvar _c;\n\n$RefreshReg$(_c, \"Player\");","map":{"version":3,"sources":["/Users/pereirapaula/Desktop/curso react/react-music-library/src/components/Player.js"],"names":["React","FontAwesomeIcon","faPlay","faAngleLeft","faAngleRight","faPause","Player","audioRef","currentSong","isPlaying","setIsPlaying","setSongInfo","songInfo","songs","setCurrentSong","setSongs","activeLibraryHandler","nextPrev","newSongs","map","song","id","active","playSongHandler","current","pause","play","getTime","time","Math","floor","slice","dragHandler","e","currentTime","target","value","skipTrackHandler","direction","currentIndex","findIndex","length","trackAnim","transform","animationPercentage","linearGrad","background","color","duration"],"mappings":"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","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({\n  audioRef,\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setSongInfo,\n  songInfo,\n  songs,\n  setCurrentSong,\n  setSongs,\n}) => {\n  const activeLibraryHandler = (nextPrev) => {\n    //add active state\n    const newSongs = songs.map((song) => {\n      if (song.id === nextPrev.id) {\n        return {\n          //devuelve la cancion entera pero cambia el active a true\n          ...song,\n          active: true,\n        };\n      }\n      return {\n        //devuelve la cancion entera pero cambia el active a false\n        ...song,\n        active: false,\n      };\n    });\n    //definimos el state para el array que hemos creado con el map\n    setSongs(newSongs);\n  };\n  //events\n  const playSongHandler = () => {\n    //si esta sonando y hacen click al boton, se hace pause, sino se toca la cancion\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying); //cambia el valor al opuesto de lo que estaba\n    }\n  };\n\n  const getTime = (time) => {\n    return (\n      //conseguimos los minutos y los segundos despues\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) //slice es una funcion que formata bien el numero\n    );\n  };\n  const dragHandler = (e) => {\n    //la e es de eventos\n    //cambia el audio para donde se fue arrastrado el evento (del range)\n    audioRef.current.currentTime = e.target.value;\n    //cambia el state para que se actualice con la informacion anterior y cambie el current time al valor donde fue arrastradi\n    setSongInfo({ ...songInfo, currentTime: e.target.value }); //los tres puntos es para mantener la informacion que tenia\n  };\n  //el async significa que la funcion es asincrona\n  //esperamos que se cambien los estados siempre antes de seguir con el await\n  //await the setStates\n  const skipTrackHandler = async (direction) => {\n    //si los ids son iguales significa que estamos en ese id, y se coge el index de esa canción\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    if (direction === \"skip-forward\") {\n      //cambia a la cancion siguiente, y cuando llegan al mismo numero se vuelve al 0\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]); //el await es para que espere que se defina la cancion\n      activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\n    }\n    if (direction === \"skip-back\") {\n      //si el index actual es -1 (que estamos volviendo de la primera a la ultima cancion), se cambia automaticamente a la ultima cancion\n      if ((currentIndex - 1) % songs.length === -1) {\n        await setCurrentSong(songs[songs.length - 1]); //songs.lenght son 8 pero los arrays empiezan en 7 y la ultima cancion es la 7\n        activeLibraryHandler(songs[songs.length - 1]);\n        if (isPlaying) audioRef.current.play();\n        return;\n      } //esa linea es solo si estamos en el medio de las canciones\n      await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex - 1) % songs.length]);\n    }\n    if (isPlaying) audioRef.current.play();\n  };\n  //añadir los estilos\n  const trackAnim = {\n    transform: `translateX(${songInfo.animationPercentage}%)`,\n  };\n  const linearGrad = {\n    background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`,\n  };\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <div style={linearGrad} className=\"track\">\n          <input\n            min={0}\n            max={songInfo.duration || 0}\n            value={songInfo.currentTime}\n            onChange={dragHandler}\n            type=\"range\"\n          />\n          <div style={trackAnim} className=\"animate-track\"></div>\n        </div>\n        <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          className=\"skip-back\"\n          size=\"2x\"\n          icon={faAngleLeft}\n          onClick={() => skipTrackHandler(\"skip-back\")}\n        />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          onClick={() => skipTrackHandler(\"skip-forward\")}\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n//OBSERVACIONES DEL RETURN\n\n//onClick={()=>skipTrackHandler(back)} cuando una funcion tiene un parametro, se inicializa sola, pero si la pones como ejecucion de una funcion flacha se espera hasta que se haga click de verdad\n\n//el input range es un input controlado porque esta vinculado a un state\n//el icono de pause y play se cambia de acuerdo con el state de isPlaying (con una condicional ternaria)\n"]},"metadata":{},"sourceType":"module"}