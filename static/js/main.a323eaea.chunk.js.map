{"version":3,"sources":["components/Player.js","components/Song.js","components/LibrarySong.js","components/Library.js","components/Nav.js","songsList.js","App.js","reportWebVitals.js","index.js"],"names":["Player","audioRef","currentSong","isPlaying","setIsPlaying","setSongInfo","songInfo","songs","setCurrentSong","setSongs","activeLibraryHandler","nextPrev","newSongs","map","song","id","active","getTime","time","Math","floor","slice","skipTrackHandler","direction","a","currentIndex","findIndex","length","current","play","trackAnim","transform","animationPercentage","linearGrad","background","color","className","currentTime","style","min","max","duration","value","onChange","e","target","type","size","icon","faAngleLeft","onClick","pause","faPause","faPlay","faAngleRight","Song","alt","name","src","cover","artist","LibrarySong","songSelectHandler","Library","libraryStatus","Nav","setLibraryStatus","faMusic","chillHop","audio","uuidv4","App","useState","data","useRef","timeUpdateHandler","roundedCurrent","round","roundedDuration","animation","songEndHandler","onTimeUpdate","onLoadedMetadata","ref","onEnded","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a323eaea.chunk.js","sourcesContent":["import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport {\n  faPlay,\n  faAngleLeft,\n  faAngleRight,\n  faPause,\n} from \"@fortawesome/free-solid-svg-icons\";\n\nconst Player = ({\n  audioRef,\n  currentSong,\n  isPlaying,\n  setIsPlaying,\n  setSongInfo,\n  songInfo,\n  songs,\n  setCurrentSong,\n  setSongs,\n}) => {\n  const activeLibraryHandler = (nextPrev) => {\n    //add active state\n    const newSongs = songs.map((song) => {\n      if (song.id === nextPrev.id) {\n        return {\n          //devuelve la cancion entera pero cambia el active a true\n          ...song,\n          active: true,\n        };\n      }\n      return {\n        //devuelve la cancion entera pero cambia el active a false\n        ...song,\n        active: false,\n      };\n    });\n    //definimos el state para el array que hemos creado con el map\n    setSongs(newSongs);\n  };\n  //events\n  const playSongHandler = () => {\n    //si esta sonando y hacen click al boton, se hace pause, sino se toca la cancion\n    if (isPlaying) {\n      audioRef.current.pause();\n      setIsPlaying(!isPlaying);\n    } else {\n      audioRef.current.play();\n      setIsPlaying(!isPlaying); //cambia el valor al opuesto de lo que estaba\n    }\n  };\n\n  const getTime = (time) => {\n    return (\n      //conseguimos los minutos y los segundos despues\n      Math.floor(time / 60) + \":\" + (\"0\" + Math.floor(time % 60)).slice(-2) //slice es una funcion que formata bien el numero\n    );\n  };\n  const dragHandler = (e) => {\n    //la e es de eventos\n    //cambia el audio para donde se fue arrastrado el evento (del range)\n    audioRef.current.currentTime = e.target.value;\n    //cambia el state para que se actualice con la informacion anterior y cambie el current time al valor donde fue arrastradi\n    setSongInfo({ ...songInfo, currentTime: e.target.value }); //los tres puntos es para mantener la informacion que tenia\n  };\n  //el async significa que la funcion es asincrona\n  //esperamos que se cambien los estados siempre antes de seguir con el await\n  //await the setStates\n  const skipTrackHandler = async (direction) => {\n    //si los ids son iguales significa que estamos en ese id, y se coge el index de esa canciÃ³n\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    if (direction === \"skip-forward\") {\n      //cambia a la cancion siguiente, y cuando llegan al mismo numero se vuelve al 0\n      await setCurrentSong(songs[(currentIndex + 1) % songs.length]); //el await es para que espere que se defina la cancion\n      activeLibraryHandler(songs[(currentIndex + 1) % songs.length]);\n    }\n    if (direction === \"skip-back\") {\n      //si el index actual es -1 (que estamos volviendo de la primera a la ultima cancion), se cambia automaticamente a la ultima cancion\n      if ((currentIndex - 1) % songs.length === -1) {\n        await setCurrentSong(songs[songs.length - 1]); //songs.lenght son 8 pero los arrays empiezan en 7 y la ultima cancion es la 7\n        activeLibraryHandler(songs[songs.length - 1]);\n        if (isPlaying) audioRef.current.play();\n        return;\n      } //esa linea es solo si estamos en el medio de las canciones\n      await setCurrentSong(songs[(currentIndex - 1) % songs.length]);\n      activeLibraryHandler(songs[(currentIndex - 1) % songs.length]);\n    }\n    if (isPlaying) audioRef.current.play();\n  };\n  //aÃ±adir los estilos\n  const trackAnim = {\n    transform: `translateX(${songInfo.animationPercentage}%)`,\n  };\n  const linearGrad = {\n    background: `linear-gradient(to right, ${currentSong.color[0]}, ${currentSong.color[1]})`,\n  };\n  return (\n    <div className=\"player\">\n      <div className=\"time-control\">\n        <p>{getTime(songInfo.currentTime)}</p>\n        <div style={linearGrad} className=\"track\">\n          <input\n            min={0}\n            max={songInfo.duration || 0}\n            value={songInfo.currentTime}\n            onChange={dragHandler}\n            type=\"range\"\n          />\n          <div style={trackAnim} className=\"animate-track\"></div>\n        </div>\n        <p>{songInfo.duration ? getTime(songInfo.duration) : \"0:00\"}</p>\n      </div>\n      <div className=\"play-control\">\n        <FontAwesomeIcon\n          className=\"skip-back\"\n          size=\"2x\"\n          icon={faAngleLeft}\n          onClick={() => skipTrackHandler(\"skip-back\")}\n        />\n        <FontAwesomeIcon\n          onClick={playSongHandler}\n          className=\"play\"\n          size=\"2x\"\n          icon={isPlaying ? faPause : faPlay}\n        />\n        <FontAwesomeIcon\n          onClick={() => skipTrackHandler(\"skip-forward\")}\n          className=\"skip-forward\"\n          size=\"2x\"\n          icon={faAngleRight}\n        />\n      </div>\n    </div>\n  );\n};\n\nexport default Player;\n//OBSERVACIONES DEL RETURN\n\n//onClick={()=>skipTrackHandler(back)} cuando una funcion tiene un parametro, se inicializa sola, pero si la pones como ejecucion de una funcion flacha se espera hasta que se haga click de verdad\n\n//el input range es un input controlado porque esta vinculado a un state\n//el icono de pause y play se cambia de acuerdo con el state de isPlaying (con una condicional ternaria)\n","import React from \"react\";\n\nconst Song = ({ currentSong }) => {\n  return (\n    <div className=\"song-container\">\n      <img alt={currentSong.name}src={currentSong.cover}></img>\n      <h2>{currentSong.name}</h2>\n      <h3>{currentSong.artist}</h3>\n    </div>\n  );\n};\n\nexport default Song;\n","import React from \"react\";\n\nconst LibrarySong = ({\n  songs,\n  song,\n  setCurrentSong,\n  id,\n  audioRef,\n  isPlaying,\n  setSongs,\n}) => {\n  const songSelectHandler = async () => {\n    await setCurrentSong(song); //asi cambiamos el estado a la cancion que fue clicada\n    //add active state\n    const newSongs = songs.map((song) => {\n      if (song.id === id) {\n        return {\n          //devuelve la cancion entera pero cambia el active a true\n          ...song,\n          active: true,\n        };\n      }\n      return {\n        //devuelve la cancion entera pero cambia el active a false\n        ...song,\n        active: false,\n      };\n    });\n    //definimos el state para el array que hemos creado con el map\n    setSongs(newSongs);\n    //check if the song is playing\n    if (isPlaying) audioRef.current.play();\n  };\n  //si la cancion esta active se aÃ±ade la clase selected y sino no se aÃ±ade nada\n  return (\n    <div\n      onClick={songSelectHandler}\n      className={`library-song ${song.active ? \"selected\" : \"\"}`}\n    >\n      <img alt={song.name} src={song.cover}></img>\n      <div className=\"song-description\">\n        <h3>{song.name}</h3>\n        <h4>{song.artist}</h4>\n      </div>\n    </div>\n  );\n};\n\nexport default LibrarySong;\n","import React from \"react\";\nimport LibrarySong from \"./LibrarySong\";\n\nconst Library = ({\n  songs,\n  setCurrentSong,\n  audioRef,\n  isPlaying,\n  setSongs,\n  libraryStatus,\n}) => {\n  return (\n    <div className={`library ${libraryStatus ? \"active-library\" : \"\"}`}>\n      <h2>Library</h2>\n      <div className=\"library-songs\">\n        {songs.map((song) => (\n          <LibrarySong\n            songs={songs}\n            song={song}\n            setCurrentSong={setCurrentSong}\n            id={song.id}\n            key={song.id}\n            audioRef={audioRef}\n            isPlaying={isPlaying}\n            setSongs={setSongs}\n          />\n        ))}\n      </div>\n    </div>\n  );\n};\n\nexport default Library;\n","import React from \"react\";\nimport { FontAwesomeIcon } from \"@fortawesome/react-fontawesome\";\nimport { faMusic } from \"@fortawesome/free-solid-svg-icons\";\n\nconst Nav = ({ setLibraryStatus, libraryStatus }) => {\n  return (\n    <nav>\n      <h1>Music App</h1>\n      <button onClick={() => setLibraryStatus(!libraryStatus)}>\n        Library\n        <FontAwesomeIcon icon={faMusic} />\n      </button>\n    </nav>\n  );\n};\nexport default Nav;\n\n//()=> setLibraryStatus(!libraryStatus) es una funcion que cambia el state al contrario del valor que estaba\n","import { v4 as uuidv4 } from \"uuid\";\nfunction chillHop() {\n  return [\n    {\n      name: \"Beaver Creek\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\n      artist: \"Aso, Middle School, Aviino\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10075\",\n      color: [\"#205950\", \"#2ab3bf\"],\n      id: uuidv4(),\n      active: true,\n    },\n    {\n      name: \"Daylight\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\n      artist: \"Aiguille\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9272\",\n      color: [\"#EF8EA9\", \"#ab417f\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Keep Going\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\n      artist: \"SwÃ¸rn\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9222\",\n      color: [\"#CD607D\", \"#c94043\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Nightfall\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ef95e219a44869318b7806e9f0f794a1f9c451e4-1024x1024.jpg\",\n      artist: \"Aiguille\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9148\",\n      color: [\"#EF8EA9\", \"#ab417f\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Reflection\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/07/ff35dede32321a8aa0953809812941bcf8a6bd35-1024x1024.jpg\",\n      artist: \"SwÃ¸rn\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9228\",\n      color: [\"#CD607D\", \"#c94043\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Under the City Stars\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/09/0255e8b8c74c90d4a27c594b3452b2daafae608d-1024x1024.jpg\",\n      artist: \"Aso, Middle School, Aviino\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=10074\",\n      color: [\"#205950\", \"#2ab3bf\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Jazz Cabbage\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/06/49f6e32ca521fbad46a1b281e3893cf6254bf11d-1024x1024.jpg\",\n      artist: \"Ian Ewing, Strehlow\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=9363\",\n      color: [\"#BA4A46\", \"#FDF0DD\"],\n      id: uuidv4(),\n      active: false,\n    },\n    {\n      name: \"Lagoons\",\n      cover:\n        \"https://chillhop.com/wp-content/uploads/2020/06/49f6e32ca521fbad46a1b281e3893cf6254bf11d-1024x1024.jpg\",\n      artist: \"Strehlow, Chris Mazuera\",\n      audio: \"https://mp3.chillhop.com/serve.php/?mp3=8266\",\n      color: [\"#BA4A46\", \"#FDF0DD\"],\n      id: uuidv4(),\n      active: false,\n    },\n  ];\n}\n\nexport default chillHop;\n","import React, { useState, useRef } from \"react\";\n//importar componentes\nimport Player from \"./components/Player\";\nimport Song from \"./components/Song\";\nimport Library from \"./components/Library\";\nimport Nav from \"./components/Nav\";\n//importar estilos\nimport \"./styles/app.scss\";\n//importar musicas\nimport data from \"./songsList\";\n\nfunction App() {\n  //state\n  const [songs, setSongs] = useState(data());\n  const [currentSong, setCurrentSong] = useState(songs[0]);\n  const [isPlaying, setIsPlaying] = useState(false);\n  const [songInfo, setSongInfo] = useState({\n    currentTime: 0,\n    duration: 0,\n    animationPercentage: 0,\n  });\n  const [libraryStatus, setLibraryStatus] = useState(false);\n  //referencias\n  const audioRef = useRef(null); //audio de la cancion\n  //funciones\n  const timeUpdateHandler = (e) => {\n    const current = e.target.currentTime;\n    const duration = e.target.duration;\n    //calcular porcentaje de la cancion\n    const roundedCurrent = Math.round(current); //funcion para quitar los decimales\n    const roundedDuration = Math.round(duration);\n    const animation = Math.round((roundedCurrent / roundedDuration) * 100);\n    setSongInfo({\n      ...songInfo,\n      currentTime: current,\n      duration,\n      animationPercentage: animation,\n    });\n  };\n  //funcion que cambia la cancion automaticamente cuando se acaba\n  const songEndHandler = async () => {\n    let currentIndex = songs.findIndex((song) => song.id === currentSong.id);\n    await setCurrentSong(songs[(currentIndex + 1) % songs.length]);\n    if (isPlaying) audioRef.current.play();\n  };\n  return (\n    <div className={`App ${libraryStatus ? \"library-active\" : \"\"}`}>\n      <Nav libraryStatus={libraryStatus} setLibraryStatus={setLibraryStatus} />\n      <Song currentSong={currentSong} />\n      <Player\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setIsPlaying={setIsPlaying}\n        currentSong={currentSong}\n        setSongInfo={setSongInfo}\n        songInfo={songInfo}\n        songs={songs}\n        setSongs={setSongs}\n        setCurrentSong={setCurrentSong}\n      />\n      <Library\n        songs={songs}\n        setCurrentSong={setCurrentSong}\n        audioRef={audioRef}\n        isPlaying={isPlaying}\n        setSongs={setSongs}\n        libraryStatus={libraryStatus}\n      />\n      <audio\n        onTimeUpdate={timeUpdateHandler}\n        //cuando se carga la informacion del audio ya empieza\n        onLoadedMetadata={timeUpdateHandler}\n        ref={audioRef}\n        src={currentSong.audio}\n        onEnded={songEndHandler}\n      ></audio>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport reportWebVitals from \"./reportWebVitals\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}